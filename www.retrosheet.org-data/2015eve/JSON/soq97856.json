{"tags":["xml", "xquery"], "originalId":"97856", "comments":[{"text":"VTD-XML is probably the only XML engine that supports native XML indexing without destroying the XML text... it is also the fastest and most powerful, the downside: only XPath 1.0 (plus some 2.0 funcs) supported at the point...", "creationDate":"2010-05-26T01:18:32.237Z", "owner":{"userName":"souser129732@example.com", "displayName":"vtd-xml-author", "originalId":"129732", "id":"sou129732"}, "id":"soc2960283"}], "owner":{"userName":"souser18297@example.com", "displayName":"Mike Starov", "originalId":"18297", "id":"sou18297"}, "lastActivityDate":"2010-11-30T17:17:16.693Z", "id":"soq97856", "answerCount":6, "answers":[{"text":"MarkLogic has released v4.2 with XSLT, which is very handy for XML transformation. The good part is in this version you can mix XQuery and XSLT code to get best of both worlds.", "upvotingContributorIds":[], "creationDate":"2010-11-30T17:17:16.693Z", "itemTally":0, "downvotingContributorIds":[], "comments":[{"text":"Thanks. I'll definetly check it out.", "creationDate":"2010-12-01T00:47:59.187Z", "owner":{"userName":"souser18297@example.com", "displayName":"Mike Starov", "originalId":"18297", "id":"sou18297"}, "id":"soc4693403"}], "owner":{"userName":"souser525069@example.com", "displayName":"Soumadri Roy", "originalId":"525069", "id":"sou525069"}, "id":"soa4316497"}, {"text":"For am Native XML database you can try [Berkeley XMLDB](http://www.oracle.com/technology/products/berkeley-db/xml/index.html), which is maintained by Oracle, but is open source. \n\nIf you would like a real robust solution, you can use a [MarkLogic Xml Server](http://www.marklogic.com/product/marklogic-server.html?PHPSESSID=td4pr92mgsp566bn220msha8s7). There is a cost. ", "upvotingContributorIds":["unknown"], "creationDate":"2008-09-20T07:36:00.210Z", "itemTally":1, "downvotingContributorIds":[], "comments":[], "id":"soa107527"}, {"text":"Take a look at [exist](http://exist.sourceforge.net/), it is an open source xml database that supports XQuery.", "upvotingContributorIds":["unknown"], "creationDate":"2008-09-18T23:16:36.310Z", "itemTally":1, "downvotingContributorIds":[], "comments":[{"text":"eXist doe not store data in XML plain text, but in persistent DOM.", "creationDate":"2008-09-23T18:22:04.577Z", "owner":{"userName":"souser18297@example.com", "displayName":"Mike Starov", "originalId":"18297", "id":"sou18297"}, "id":"soc27744"}], "owner":{"userName":"souser2037@example.com", "displayName":"preston", "originalId":"2037", "id":"sou2037"}, "id":"soa97933"}, {"text":"MarkLogic Xml Database server (4.x) has couple of good features that you try.\n\n1. it has a good native Xquery implemenation which you can query your xml documents.\n\n2. it has an inbuild search engine /search parser and has a XQuery extension which can index your documents fast.\n\n3. it has a simple REST based protocal support which can talk to external system and behave.", "upvotingContributorIds":[], "creationDate":"2010-04-12T18:21:02.610Z", "itemTally":0, "downvotingContributorIds":[], "comments":[], "owner":{"userName":"souser127958@example.com", "displayName":"kadalamittai", "originalId":"127958", "id":"sou127958"}, "id":"soa2624337"}, {"text":"I don't know of any XQuery implementation that will both index your documents and leave them on the filesystem.\n\nBut if you have a small amount of data, you could use the filesystem and use [Saxon](http://www.saxonica.com/) as your XQuery implementation to query the documents. Saxon can [treat any directory as a \"collection\"](http://saxonica.com/documentation/sourcedocs/collections.html \"Saxon Collections\") (in a pretty flexible way), which means you can query across a bunch of documents at the same time. \n\nIf you have a moderate amount of data (and the filesystem approach is too slow), then [eXist](http://exist.sourceforge.net/) is a good open-source option that I've used. One advantage is that it has a WebDAV interface which means it's very easy to edit the files and view them as just another directory. eXist has a [history trigger](http://exist-db.org/triggers.html#N102B2) which will store old versions of documents as they're replaced; I haven't used it but you might be able to build something around that which would give you the version control you need. It's also possible to backup the eXist database to a file, which you'd then version control using Subversion.\n\nIf you have a large amount of data or eXist isn't robust enough, then [MarkLogic Server](http://www.marklogic.com/product/marklogic-server.html) is the leading commercial XML database and I believe it has some support for versioning internally.", "upvotingContributorIds":["unknown"], "creationDate":"2008-09-26T09:06:34.217Z", "itemTally":1, "downvotingContributorIds":[], "comments":[], "owner":{"userName":"souser6739@example.com", "displayName":"JeniT", "originalId":"6739", "id":"sou6739"}, "id":"soa138388"}, {"text":"I have worked with Berkeley XMLDB a lot the past year and its kinda a mixed bag. \n\nPros: FAST, xquery and xupdate, oracle is maintaining well, many languages have interfaces, small imprint, embedded, file based (maybe some see that as a con?), extremely flexible for some wicked awesome queries\n\nCons: its a bug pain in the butt if you are dealing with any concurrency type of situation, environments are a weird concept for any relational db person to pick up, very sensitive in general and tends to segfault if not happy\n\nAgree with another poster - going to a more robust situation is a big cost, usually in speed. If I was going to try anything else, it would be exist but I'm deterred by the overhead of the java packaging.\n\nConceptually xmldbs rock super hard, its just that the implementations of it are somewhat immature, lack of competition, lack of industry know how.", "upvotingContributorIds":[], "creationDate":"2008-11-04T19:35:13.113Z", "itemTally":0, "downvotingContributorIds":[], "comments":[], "id":"soa263114"}], "voteCount":4, "accepted":true, "downvotingContributorIds":[], "text":"My company is in education industry and we use XML to store course content. We also store some course related information (mostly metainfo) in relational database. Right now we are in the process of switching from our proprietary XML Schema to DocBook 5. Along with the switch we want to move course related information from database to XML files. The reason for this is to have all course data in one place and to put it under Subversion. However, we would like to keep flexibility of the relational database and be able to easily extract specific information about a course from an XML document. XQuery seems to be up to the task so I was researching databases that supports it but so far could not find what I needed. What I basically want, is to have my XML files in a certain directory structure and then on top of this I would like to have a system that would index my files and let me select anything out of any file using XQuery. This way I can have \"my cake and eat it too\": I will have XQuery interface and still keep my files in plain text and versioned. Is there anything out there at least remotely resembling to what I want? \n\nIf you think that what I an asking for is nonsense please make an alternative suggestion. \n\nOn the related note: What XML Databases (preferably native and open source) do you have experience with and what would you recommend?", "creationDate":"2008-09-18T23:06:05.460Z", "itemTally":1, "upvotingContributorIds":["unknown"], "title":"Is there an XML XQuery interface to existing XML files?", "acceptedAnswerId":"soa97933"}